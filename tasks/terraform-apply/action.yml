name: Run Terraform Apply
description: Runs a given terraform project passing in the database name to run as
inputs:
  working-directory:
    description: The directory where the terrorm project is located
    required: true
  target-database:
    description: The target database name to apply permissions to
    required: true
  snowflake-account-name:
    description: The Snowflake account name
    required: true
  snowflake-account-region:
    description: The Snowflake account region name
    required: true
  snowflake-username:
    description: The Snowflake username
    required: true
  snowflake-authenticator:
    description: The authenticator for Snowflake
    required: true
  snowflake-authenticator-value:
    description: The authenticator for Snowflake
    required: true
  snowflake-privatekey-passphrase:
    description: The private key passphrase for Snowflake
    required: true
  snowflake-role:
    description: The Snowflake role
    required: true
  snowflake-warehouse:
    description: The Snowflake warehouse
    required: true
  import-state:
    description: Imports existing state of existing objects
    required: true
    default: 'false'
 
runs:
  using: "composite"
  steps:
    - name: Find and replace the placeholders
      run: |
          $providers_file = "providers.tf.template"
          if (Test-Path -Path $providers_file) {
              ((Get-Content -path $providers_file -Raw) `
                  -replace '<<snowflake_username>>', '${{ inputs.snowflake-username }}'  `
                  -replace '<<snowflake_account>>', '${{ inputs.snowflake-account-name }}' `
                  -replace '<<snowflake_region>>', '${{ inputs.snowflake-account-region }}' `
                  -replace '<<authenticator_type>>', '${{ inputs.snowflake-authenticator }}' `
                  -replace '<<authenticator_value>>', '${{ inputs.snowflake-authenticator-value }}' `
                  -replace '<<snowflake_role>>', '${{ inputs.snowflake-role }}' `
                  -replace '<<snowflake_warehouse>>', '${{ inputs.snowflake-warehouse }}' `
              ) | Set-Content -Path $providers_file

              if ('${{ inputs.snowflake-authenticator }}' -eq 'password') {
                Get-Content $providers_file | Where-Object {$_ -notmatch 'private_key_passphrase'} | Set-Content $providers_file
              } else {
                ((Get-Content -path $providers_file -Raw) `
                  -replace '<<private_key_passphrase>>', '${{ inputs.snowflake-privatekey-passphrase }}' `
                ) | Set-Content -Path $providers_file
              }
          }
          
          

          if (Test-Path -Path variables.auto.tfvars.template) {
            sed -i 's/<<database_name>>/${{ inputs.target-database }}/g' variables.auto.tfvars.template
          }
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}

    


    - name: Rename Templates
      run: |
        if (Test-Path -Path providers.tf) {
          Remove-Item -Path providers.tf
        }
        Rename-Item -Path providers.tf.template -NewName providers.tf

        if (Test-Path -Path variables.auto.tfvars) {
          Remove-Item -Path variables.auto.tfvars
        }
        Rename-Item -Path variables.auto.tfvars.template -NewName variables.auto.tfvars
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      id: init
      run: |
        terraform init
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Create Current State File
      id: create-state
      if: ${{ inputs.import-state == 'true' }}
      run: .\helpers\import_objects.ps1
      shell: pwsh
      working-directory: ${{ inputs.working-directory }}

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        terraform plan -no-color
      shell: bash
      continue-on-error: true
      working-directory: ${{ inputs.working-directory }}

    - name: Terraform Plan Status
      if:  steps.plan.outcome == 'failure'
      shell: bash
      run: exit 1

    - name: Terraform Apply
      if: github.event_name != 'pull_request'
      run: |
        terraform apply -auto-approve
      shell: bash
      working-directory: ${{ inputs.working-directory }}

    - name: Terraform Apply (to fix state)
      if: ${{ github.event_name != 'pull_request' && inputs.import-state == 'false' }}
      run: |
        terraform apply -auto-approve
      shell: bash
      working-directory: ${{ inputs.working-directory }}
