parameters:
  - name: target_directory
    type: string
  - name: working_directory
    type: string
  - name: dbt_directory
    type: string
  - name: docs_repo
    type: string
  - name: docs_repo_folder
    type: string
  - name: target_folder
    type: string


steps:

  - task: Bash@3
    displayName: Get Manifest and Catalog Paths
    name: update_locations
    inputs:
      targetType: 'inline'
      script: |
        echo "##vso[task.setvariable variable=MANIFEST_FILE;isOutput=true]$(echo /${{ parameters.target_folder }}/manifest.json)"
        echo "##vso[task.setvariable variable=CATALOG_FILE;isOutput=true]$(echo /${{ parameters.target_folder }}/catalog.json)"

  - powershell: |
        sed -i 's|<<BRANCH_NAME>>|${{ parameters.target_folder }}|g' manifest.json
        sed -i 's|manifest.json|/${{ parameters.target_folder }}/manifest.json|g' index.html
        sed -i 's|catalog.json|/${{ parameters.target_folder }}/catalog.json|g' index.html
    displayName: Find and replace the placeholders
    workingDirectory: ${{ parameters.working_directory }}/${{ parameters.dbt_directory }}/${{ parameters.target_directory }}

  - task: Bash@3
    displayName: 'List Branches'
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.working_directory }}
      script: |
        echo "setting git config"
        git config --global user.email "pipelines@visualstudio.com"
        git config --global user.name "Azure DevOps Pipelines"
        echo "fetching all branches"
        git fetch --all
        git branch -r > branches.txt

  - checkout: git://$(System.TeamProject)/${{ parameters.docs_repo }}
    displayName: Checkout Documentation Repo
    persistCredentials: true
    path: docsrepo

  - task: Bash@3
    displayName: 'Update Documentation repo'
    inputs:
      targetType: 'inline'
      workingDirectory: "../"
      script: |
        cd docsrepo
        git config --global user.email "pipelines@visualstudio.com"
        git config --global user.name "Azure DevOps Pipelines"
        # Root Contents
        manifest_file_path="../../../../s/${{ parameters.working_directory }}/${{ parameters.dbt_directory }}/${{ parameters.target_directory }}/manifest.json"
        catalog_file_path="../../../../s/${{ parameters.working_directory }}/${{ parameters.dbt_directory }}/${{ parameters.target_directory }}/catalog.json"
        index_file_path="../../../../s/${{ parameters.working_directory }}/${{ parameters.dbt_directory }}/${{ parameters.target_directory }}/index.html"
        branches_file_path="../../../s/branches.txt"
        cd ${{ parameters.docs_repo_folder }}
        cd wwwroot
        if test -d ${{ parameters.target_folder }}; then
          echo "Directory ${{ parameters.target_folder }} exists."
        else
          echo "Directory ${{ parameters.target_folder }} does not exists."
          mkdir ${{ parameters.target_folder }}
        fi
        cd ./${{ parameters.target_folder }}
        cp -f $manifest_file_path .
        cp -f $catalog_file_path .
        cp -f $index_file_path .
        git add -A
        git commit -m "Added dbt docs for ${{ parameters.target_folder }}"
        cd ..
        for folder in ./*/; do
          echo "checking folder $folder in file $branches_file_path"
          if grep -q "${folder::-1}" $branches_file_path; then
            echo "Keeping $folder"
          elif [ "$folder" == "./css/" ]; then
            echo "Keeping $folder"
          elif [ "$folder" == "./images/" ]; then
            echo "Keeping $folder"
          elif [ "$folder" == "./js/" ]; then
            echo "Keeping $folder"
          elif [ "$folder" == "./lib/" ]; then
            echo "Keeping $folder"
          elif [ "$folder" == "./${{ parameters.target_folder }}/" ]; then
            echo "Keeping current branch $folder"
          else
            echo "Deleting $folder"
            rm -rf $folder
            git rm -r $folder
            git commit -m "Delete Old branch $folder"
          fi
        done
        git push --set-upstream origin HEAD:main;
