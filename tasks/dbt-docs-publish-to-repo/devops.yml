parameters:
  - name: target_directory
    type: string
  - name: working_directory
    type: string
  - name: dbt_directory
    type: string
  - name: docs_repo
    type: string
  - name: docs_repo_folder
    type: string
  - name: target_folder
    type: string


steps:

  - task: Bash@3
    displayName: Get Manifest and Catalog Paths
    name: update_locations
    inputs:
      targetType: 'inline'
      script: |
        echo "##vso[task.setvariable variable=MANIFEST_FILE;isOutput=true]$(echo /${{ parameters.target_folder }}/manifest.json)"
        echo "##vso[task.setvariable variable=CATALOG_FILE;isOutput=true]$(echo /${{ parameters.target_folder }}/catalog.json)"

  - task: Bash@3
    displayName: 'List Branches'
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.working_directory }}
      script: |
        echo "setting git config"
        git config --global user.email "pipelines@visualstudio.com"
        git config --global user.name "Azure DevOps Pipelines"
        echo "fetching all branches"
        git fetch --all
        git branch -r > branches.txt

  - powershell: |
        $branch_file = "../../branches.txt"
        Write-Host "Branch File: $branch_file"
        Write-Host "Branch Name: ${{ parameters.target_folder }}"
        Write-Host "-----------------------------"
        Get-Content -Path $branch_file
        Write-Host "-----------------------------"
        $branch_name = Select-String -Path $branch_file -Pattern "${{ parameters.target_folder }}$" | Select-Object -ExpandProperty Line
        Write-Host $branch_name
        $branch_name = $branch_name.Substring(9)
        Write-Host $branch_name
        (Get-Content -Path "manifest.json") -replace "<<BRANCH_NAME>>", $branch_name | Set-Content -Path "manifest.json"
        (Get-Content -Path "index.html") -replace "manifest.json", "/$branch_name/manifest.json" | Set-Content -Path "index.html"
        (Get-Content -Path "index.html") -replace "catalog.json", "/$branch_name/catalog.json" | Set-Content -Path "index.html"
    displayName: Find and replace the placeholders
    workingDirectory: ${{ parameters.working_directory }}/${{ parameters.dbt_directory }}/${{ parameters.target_directory }}


  - checkout: git://$(System.TeamProject)/${{ parameters.docs_repo }}
    displayName: Checkout Documentation Repo
    persistCredentials: true
    path: docsrepo

  - task: Bash@3
    displayName: 'Update Documentation repo'
    inputs:
      targetType: 'inline'
      workingDirectory: "../"
      script: |
        cd docsrepo
        git config --global user.email "pipelines@visualstudio.com"
        git config --global user.name "Azure DevOps Pipelines"
        # Root Contents
        manifest_file_path="../../${{ parameters.working_directory }}/${{ parameters.dbt_directory }}/${{ parameters.target_directory }}/manifest.json"
        catalog_file_path="../../${{ parameters.working_directory }}/${{ parameters.dbt_directory }}/${{ parameters.target_directory }}/catalog.json"
        index_file_path="../../${{ parameters.working_directory }}/${{ parameters.dbt_directory }}/${{ parameters.target_directory }}/index.html"
        branches_file_path="../../${{ parameters.working_directory }}/branches.txt"
        cd ${{ parameters.docs_repo_folder }}
        cd wwwroot
        branch_name=$(grep -r "${{ parameters.target_folder }}$" "$branches_file_path")
        IFS='/' read -ra folders <<< "${branch_name:9}"

        for folder in "${folders[@]}"; do
            if test -d $folder; then
                echo "Directory $folder exists."
            else
                echo "Directory $folder does not exists ... creating it"
                mkdir $folder
            fi
            echo "current: $folder"
            echo "target: $target_folder"
                manifest_file_path="../$manifest_file_path"
                catalog_file_path="../$catalog_file_path"
                index_file_path="../$index_file_path"
            cd $folder
        done
        cp -f $manifest_file_path .
        cp -f $catalog_file_path .
        cp -f $index_file_path .
        git add -A
        git commit -m "Added dbt docs for ${{ parameters.target_folder }}"
        for folder in "${folders[@]}"; do
          cd ..
        done
        for folder in $(find . -type d); do
          echo "checking folder ${folder:2:-1} in file $branches_file_path"
          if grep -q "${folder:2:-1}" $branches_file_path; then
            echo "Keeping $folder"
          elif [[ "$folder" == "./css"* ]]; then
            echo "Keeping $folder"
          elif [[ "$folder" == "./images"* ]]; then
            echo "Keeping $folder"
          elif [[ "$folder" == "./js"* ]]; then
            echo "Keeping $folder"
          elif [[ "$folder" == "./lib"* ]]; then
            echo "Keeping $folder"
          elif [ "$folder" == "./${{ parameters.target_folder }}/" ]; then
            echo "Keeping current branch $folder"
          else
            echo "Deleting $folder"
            rm -rf $folder
            git rm -r $folder
            git commit -m "Delete Old branch $folder"
          fi
        done
        git push --set-upstream origin HEAD:main;
