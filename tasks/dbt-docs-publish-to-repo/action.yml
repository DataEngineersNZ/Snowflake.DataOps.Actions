name: Publish Dbt Docs to Docs Repository
description: Publish the dbt docs to Docs Repository
inputs:
  target-directory:
    description: The directory where the DBT output is located
    required: true
  working-directory:
    description: The directory where the project is located
    required: true
  dbt-directory:
    description: The directory where dbt is located
    required: true
  branch_based_folder:
    description: The sub folder to add the files to in the storage account
    required: false
    default: 'yes'
  docs_repo:
    description: The name of the repository where the docs are located
    required: false
  docs_repo_folder:
    description: The folder where the files are located
    required: false
  docs_repo_pat:
    description: The PAT to access the repository
    required: false

runs:
  using: "composite"
  steps:
      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / -)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV

      - name: Get Manifest and Catalog Paths
        shell: bash
        run: |
          echo "MANIFEST_FILE=$(echo /${{ env.BRANCH_NAME }}/manifest.json)" >> $GITHUB_ENV
          echo "CATALOG_FILE=$(echo /${{ env.BRANCH_NAME }}/catalog.json)" >> $GITHUB_ENV

      - name: view directory
        shell: bash
        run: |
          echo "Working Directory: ${{ inputs.working_directory }}"
          ls
          echo "=================================="
          echo "DBT Directory: ${{ inputs.dbt-directory }}"
          ls ${{ inputs.dbt-directory }}
          echo "=================================="
          echo "Target Directory: ${{ inputs.target-directory }}"
          ls ${{ inputs.dbt-directory }}/${{ inputs.target-directory }}
        working-directory: ${{ inputs.working_directory }}

      - name: List Branches
        shell: bash
        run: |
          ls
          git fetch --all
          git branch -r > branches.txt
        working-directory: ${{ inputs.working_directory }}

      - name: Find and replace the placeholders
        shell: pwsh
        run: |
          $branch_file = "../../branches.txt"
          Write-Host "Branch File: $branch_file"
          Write-Host "Branch Name: ${{ inputs.target_folder }}"
          Write-Host "-----------------------------"
          Get-Content -Path $branch_file
          Write-Host "-----------------------------"
          $branch_name = Select-String -Path $branch_file -Pattern "${{ inputs.target_folder }}$" | Select-Object -ExpandProperty Line
          Write-Host $branch_name
          $branch_name = $branch_name.Substring(9)
          Write-Host $branch_name
          (Get-Content -Path "manifest.json") -replace "<<BRANCH_NAME>>", $branch_name | Set-Content -Path "manifest.json"
          (Get-Content -Path "index.html") -replace "manifest.json", "/$branch_name/manifest.json" | Set-Content -Path "index.html"
          (Get-Content -Path "index.html") -replace "catalog.json", "/$branch_name/catalog.json" | Set-Content -Path "index.html"
        working-directory: ${{ inputs.working-directory }}/${{ inputs.dbt-directory }}/${{ inputs.target-directory }}


      - name: Clone Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/${{ inputs.docs_repo }}
          token: ${{ inputs.docs_repo_pat }}
          path: docsrepo

      - name: view directory
        shell: bash
        run: |
          echo "Working Directory: ${{ inputs.working_directory }}"
          ls
          echo "=================================="
          echo "Above Directory: .."
          ls ..
          echo "=================================="
        working-directory: ${{ inputs.working_directory }}

      - name: Push Item
        shell: bash
        working-directory: "../"
        run: |
          echo "Listing files in root"
          ls
          cd docsrepo
          echo "Listing files in docsrepo"
          ls

          # Push to the target repository here
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          # Configure paths relative to root
          manifest_file_path="../../${{ inputs.working-directory }}/${{ inputs.dbt-directory }}/${{ inputs.target-directory }}/manifest.json"
          catalog_file_path="../../${{ inputs.working-directory }}/${{ inputs.dbt-directory }}/${{ inputs.target-directory }}/catalog.json"
          index_file_path="../../${{ inputs.working-directory }}/${{ inputs.dbt-directory }}/${{ inputs.target-directory }}/index.html"
          branches_file_path="../../${{ inputs.working-directory }}/branches.txt"
          echo "Listing files in ../../${{ inputs.working-directory }}"
          ls ../../${{ inputs.working-directory }}
          cd ${{ inputs.docs_repo_folder }}
          echo "Listing files in ${{ inputs.docs_repo_folder }}"
          ls
          cd wwwroot
          branch_name=$(grep -r "${{ inputs.target_folder }}$" "$branches_file_path")
          IFS='/' read -ra folders <<< "${branch_name:9}"

          for folder in "${folders[@]}"; do
            if test -d $folder; then
                echo "Directory $folder exists."
            else
                echo "Directory $folder does not exists ... creating it"
                mkdir $folder
            fi
            echo "current: $folder"
            echo "target: $target_folder"
                manifest_file_path="../$manifest_file_path"
                catalog_file_path="../$catalog_file_path"
                index_file_path="../$index_file_path"
            cd $folder
          done

          cp -f $manifest_file_path .
          cp -f $catalog_file_path .
          cp -f $index_file_path .
          git add -A
          git commit -m "Added dbt docs for ${{ env.BRANCH_NAME }}"
          for folder in "${folders[@]}"; do
            cd ..
          done
          for folder in $(find . -type d); do
            echo "checking folder ${folder:2:-1} in file $branches_file_path"
            if grep -q "${folder:2:-1}" $branches_file_path; then
              echo "Keeping $folder"
            elif [[ "$folder" == "./css"* ]]; then
              echo "Keeping $folder"
            elif [[ "$folder" == "./images"* ]]; then
              echo "Keeping $folder"
            elif [[ "$folder" == "./js"* ]]; then
              echo "Keeping $folder"
            elif [[ "$folder" == "./lib"* ]]; then
              echo "Keeping $folder"
            elif [ "$folder" == "./${{ inputs.target_folder }}/" ]; then
              echo "Keeping current branch $folder"
            else
              echo "Deleting $folder"
              rm -rf $folder
              git rm -r $folder
              git commit -m "Delete Old branch $folder"
            fi
          done
          git push
